<?xml version="1.0"?>
<implementation>
	<functions>

		ipAddr = ""
		ipPort = 80
		lug_device = 0
		switchID = ""
		retryCount = 1
		PollPeriod = 60

		function hex_dump(buf)
			if (buf == nil) then return nil end
			local outBuf = "\n"
			for i=1,math.ceil(#buf/16) * 16 do
				if (i-1) % 16 == 0 then outBuf = outBuf .. string.format('%08X  ', i-1) end
				outBuf = outBuf .. ((i > #buf) and '   ' or string.format('%02X ', buf:byte(i)))
				if ((i %  8) == 0) then outBuf = outBuf .. " " end
				if ((i % 16) == 0) then outBuf = outBuf .. buf:sub(i-16+1, i):gsub("%c",".").."\n" end
			end
			return outBuf
		end


		local EcoSwitch = {
			createMessage = function(self, command, id, state)
				luup.log("(I_ECO_Switch::EcoSwitch::createMessage) Called createMessage("..(command or "nil")..",\""..(id or "nil").."\","..(state and "true" or "false")..").")

				local buffer = ""
				local command1 = ""
				local command2 = ""
				local new_state = ""

				if (command == 'set') then
					command1 = 0x16000500;
					command1 = string.char(22,0,5,0)
					command2 = string.char(2,0)
					if (state) then
						new_state = string.char(1,1)
					else
						new_state = string.char(1,0)
					end
				elseif (command == 'get') then
					command1 = string.char(23,0,5,0)
					command2 = string.char(0,0)
					new_state = ""
				else
					return nil
				end

				-- Byte 0:3 - Command 0x16000500 = Write, 0x17000500 = Read
				buffer = command1
    
				-- Byte 4:7 - Command sequence num - looks random
				local rand = string.format("%08x",math.random(65535))
				buffer = buffer..string.char(tonumber(rand:sub(1,2),16),tonumber(rand:sub(3,4),16),tonumber(rand:sub(5,6),16),tonumber(rand:sub(7,8),16))

				-- Byte 8:9 - Not sure what this field is - 0x0200 = Write, 0x0000 = Read
				buffer = buffer..command2

				-- Byte 10:14 - ASCII encoded FW Version - Set in readback only?
				buffer = buffer..string.char(0,0,0,0,0)
    		
				-- Byte 15 - Always 0x0
				buffer = buffer..string.char(0)

				-- Byte 16:31 - ECO Plugs ID ASCII Encoded
				buffer = buffer..string.sub(id..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),1,16)

				-- Byte 32:47 - 0's - Possibly extension of Plug ID
				buffer = buffer..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

				-- Byte 48:79 - ECO Plugs name as set in app
				buffer = buffer..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
				buffer = buffer..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

				-- Byte 80:95 - ECO Plugs ID without the 'ECO-' prefix - ASCII Encoded
				buffer = buffer..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

				-- Byte 96:111 - 0's
				buffer = buffer..string.char(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)

				-- Byte 112:115 - Something gets returned here during readback - not sure
				buffer = buffer..string.char(0,0,0,0)

				-- Byte 116:119 - The current epoch time in Little Endian
				local timestamp = string.format("%08x",os.time())
				buffer = buffer..string.char(tonumber(timestamp:sub(1,2),16),tonumber(timestamp:sub(3,4),16),tonumber(timestamp:sub(5,6),16),tonumber(timestamp:sub(7,8),16))

				-- Byte 120:123 - 0's
				buffer = buffer..string.char(0,0,0,0)

				-- Byte 124:127 - Not sure what this field is - this value works, but i've seen others 0xCDB8422A
				buffer = buffer..string.char(205,184,66,42)

				-- Byte 128:129 - Power state (only for writes)
				buffer = buffer..new_state

				luup.log("(I_ECO_Switch::EcoSwitch::createMessage) Created command data - time ["..(os.time() or "NIL").."] ["..hex_dump(buffer).."]")
				return buffer
			end,
	
			sendMessage = function(self, address, id, msg, retry_count)
				luup.log("(I_ECO_Switch::EcoSwitch::sendMessage) Called sendMessage("..(address or "nil")..",\""..(id or "nil").."\","..(msg or "nil")..","..(retry_count or "nil")..").")
				if ((retry_count == nil) or (retry_count == 0)) then retry_count = 1 end
				local resp = nil
				repeat
					local socket = require("socket")
					local udp = assert(socket.udp())
					udp:settimeout(1)
					luup.log("(I_ECO_Switch::EcoSwitch::sendMessage)    Sending command...")
					assert(udp:sendto(msg, address, 80))
					resp = udp:receive()
					udp:close()
					retry_count = retry_count - 1
				until ( (retry_count == 0) or ((resp ~= nil) and (resp ~= "")))
				luup.log("(I_ECO_Switch::EcoSwitch::sendMessage)   received response ["..(hex_dump(resp) or "NIL").."]")
				if ((resp ~= nil) and (resp ~= "")) then
					luup.log("(I_ECO_Switch::EcoSwitch::sendMessage)   Sent command.",1)
					return false, resp
				else
					luup.log("(I_ECO_Switch::EcoSwitch::sendMessage)   Send command failed.",1)
				end
				return true, nil
			end,

			setStatus = function (self, address, id, on)
				luup.log("(I_ECO_Switch::EcoSwitch::setStatus) Called setStatus("..(address or "nil")..",\""..(id or "nil").."\","..(on and "true" or "false")..").")

				local msg = self:createMessage('set', id, on)
				local retry_count = 3

				local err, resp = self:sendMessage(address, id, msg, retry_count)
				-- the set command does NOT respond with a device status report
				if (not err) then
					local status = self:getStatus(address,id)
					if (status ~= nil) then
						luup.log("(I_ECO_Switch::EcoSwitch::setStatus) State of switch with ID "..(switchID or "NIL").." set to: ["..((status == true)and "ON" or "OFF").."]")
						return status
					else
						luup.log("(I_ECO_Switch::EcoSwitch::setStatus) State of switch with ID "..(switchID or "NIL").." set to: ["..((status == true)and "ON" or "OFF").."]")
						return nil
					end
				else
					luup.log("(I_ECO_Switch::EcoSwitch::setStatus) Error getting status of switch with ID "..(switchID or "NIL")..".")
				end
				return nil
			end,

			readState = function(self,msg)
				if (msg:byte(130) == 0) then
					return false
				else
					return true
				end
			end,

			readName = function (self,msg)
				return (msg and (msg:sub(49, 80)) or nil)
			end,

			getStatus = function(self, address, id)
				luup.log("(I_ECO_Switch::EcoSwitch::getStatus) Called getStatus("..(address or "nil")..",\""..(id or "nil").."\").")
				local status = false
				local msg = self:createMessage('get', id)
				local retry_count = 3
				local err, resp = self:sendMessage(address, id, msg, retry_count)
				if (err == false) then
					local status = self:readState(resp)
					luup.log("(I_ECO_Switch::EcoSwitch::getStatus) Status of switch with ID "..(switchID or "NIL").." is: ["..((status == true)and "ON" or "OFF").."]")
					return status
				else
					luup.log("(I_ECO_Switch::EcoSwitch::getStatus) Error getting status of switch with ID "..(switchID or "NIL")..".")
				end
				return nil
			end
		}

		function PollSwitch()
			luup.log("(I_ECO_Switch::PollSwitch) Polling for switch status.",2)
			luup.log("(I_ECO_Switch::PollSwitch) Poll period ["..(PollPeriod or "NIL").."].",2)
			luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status",(EcoSwitch:getStatus(ipAddr,switchID) and 1 or 0),lul_device)
			luup.call_delay("PollSwitch",PollPeriod,"")
			luup.log("(I_ECO_Switch::PollSwitch) Polling for switch status completed.",2)
		end

		function getIP(lul_device)
			local ip = luup.devices[lul_device].ip
			luup.log("(I_ECO_Switch::getIP) raw ip address ["..(ip or "NIL").."].")
			ipAddr, ipPort = string.match(ip,"(%d+%.%d+%.%d+%.%d+)%:?(%d*)")
			if (ipAddr == nil) then
				ipAddr, ipPort = string.match(ip,"(%d+%.%d+%.%d+%.%d+)")
			end
			if (ipAddr == nil) or (#ipAddr == 0) then
				luup.log("(I_ECO_Switch::getIP) Invalid ip address ["..(ip or "NIL").."].")
				return false
			end
			if (ipPort == nil) or (#ipPort == 0) then
				ipPort = 80
				luup.attr_set("ip",ipAddr .. ":" .. ipPort,lul_device)
				luup.log("(I_ECO_Switch::getIP) Port not specified, " .. ipPort .. " assumed.")
			end
			return true
		end

		function init(lul_device)
			luup.log("(I_ECO_Switch::Init) Starting...")
			lug_device = lul_device
			-- initialize sane values if not already set
			local target = luup.variable_get("urn:upnp-org:serviceId:SwitchPower1","Target", lul_device)
			if target == nil then
				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Target","0",lul_device)
			end
			local status = luup.variable_get("urn:upnp-org:serviceId:SwitchPower1","Status", lul_device)
			if status == nil then
				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status","0",lul_device)
			end

			if (getIP(lul_device)) then
				switchID = luup.devices[lul_device].id or ""
				luup.log("(I_ECO_Switch::Init) Switch ID ["..(switchID or "NIL").."].")

				-- set initial status and start the poll process
				PollSwitch()
--				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1","Status",(EcoSwitch:getStatus(ipAddr,switchID) and 1 or 0),lul_device)

				if luup.version_major == 7 then luup.set_failure(0, lul_device) end
				luup.log("(I_ECO_Switch::Init) Started.")
				return true, "Started", "ECO_Switch"
			else
				luup.set_failure(1, lul_device)
				luup.log("(I_ECO_Switch::Init) Init failed.")
				return false, "Switch Device IP not set", "ECO_Switch"
			end
		end

	</functions>

	<startup>init</startup>

	<actionList>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
      	if ((ipAddr == nil) or (ipAddr == "")) then
					luup.log("(I_ECO_Switch::ACTION::SetTarget) IP ADDRESS not configured")
      		return 2,nil
      	end
      	local TARGETval = (tonumber(lul_settings.newTargetValue,10) == 1) and true or false
				luup.log("(I_ECO_Switch::ACTION::SetTarget) Setting switch state to ["..(TARGETval and "ON" or "OFF").."]")
				luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Target", lul_settings.newTargetValue, lul_device)
				local resp = EcoSwitch:setStatus(ipAddr, switchID, TARGETval)
				if (resp ~= nil) then
					luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Status", (resp and 1 or 0), lul_device)
					luup.log("(I_ECO_Switch::ACTION::SetTarget) Switch state to "..(resp and "ON" or "OFF").."]")
				else
					luup.log("(I_ECO_Switch::ACTION::GetStatus) ERROR:Switch state not set for switch ["..(switchID).."]")
      		return 2,nil
				end
				return 4,nil
			</job>
		</action>
    
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>GetStatus</name>
			<job>
      	if ((ipAddr == nil) or (ipAddr == "")) then
					luup.log("(I_ECO_Switch::ACTION::SetTarget) IP ADDRESS not configured")
      		return 2,nil
      	end
				luup.log("(I_ECO_Switch::ACTION::GetStatus) Getting switch state")
				local resp = EcoSwitch:getStatus(ipAddr, switchID)
				if (resp ~= nil) then
					luup.variable_set("urn:upnp-org:serviceId:SwitchPower1", "Status", (resp and 1 or 0), lul_device)
					luup.log("(I_ECO_Switch::ACTION::GetStatus) Switch state is "..(resp and "ON" or "OFF").."]")
				else
					luup.log("(I_ECO_Switch::ACTION::GetStatus) Switch state not returned for switch ["..(switchID).."]")
				end
				return 4,nil
			</job>
		</action>
	</actionList>
</implementation>

